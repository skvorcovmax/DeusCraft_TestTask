// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
namespace testtask_deuscraft
{
	/// <summary>
	/// Интерпретатор параметров консоли
	/// </summary>
	public class ConsoleInterpreter
	{
		/// <summary>
		/// Места строк в массиве для разбора введенных с командной строки аргументов
		/// </summary>
		const int FILENAME_PLACE = 1;
		const int TASKMODE_PLACE = 3;
		const int SEARCHSTRING_PLACE = 5;

		public enum EnumTask {None, HelpTask, FileTask};
		public enum EnumFileTaskMode {None, SearchStringMode, CalculateCheckSummMode};

		EnumTask Task = EnumTask.None;
		EnumFileTaskMode TaskMode = EnumFileTaskMode.None;

		String fileName = null;
		String searchString = null;

		/// <summary>
		/// Получение Enum типа указанной в аргументах задачи.
		/// </summary>
		/// <returns>The task.</returns>
		public EnumTask GetTask()
		{
			return Task;
		}
		/// <summary>
		/// Получение указанного в аргументах режима работы для указанного типа задачи 
		/// </summary>
		/// <returns>The file task mode.</returns>
		public EnumFileTaskMode GetFileTaskMode()
		{
			return TaskMode;
		}

		/// <summary>
		/// Получение имени файла из аргументов
		/// </summary>
		/// <returns>The file name.</returns>
		public String GetFileName()
		{
			return fileName;
		}

		/// <summary>
		/// Получение строки для поиска из аргументов
		/// </summary>
		/// <returns>The search string.</returns>
		public String GetSearchString()
		{
			return searchString;
		}

		/// <summary>
		/// Разбор типа задачи
		/// </summary>
		/// <param name="args">Arguments.</param>
		void InterpretTaskParam (String[] args)
		{
			int taskFlagPlace = FILENAME_PLACE - 1;

			if (args.Length > taskFlagPlace)
			{
				if (args [taskFlagPlace].Equals ("-h")) 
				{
					Task = EnumTask.HelpTask;
				}

				if (args [taskFlagPlace].Equals ("-f")) 
				{
					if (args.Length > FILENAME_PLACE)
					{
						Task = EnumTask.FileTask;
						fileName = args[FILENAME_PLACE];
					}
				}
			}
		}

		/// <summary>
		/// Разбор указанного способа выполнения задачи
		/// </summary>
		/// <param name="args">Arguments.</param>
		void InterpretModeParam (String[] args)
		{
			if (args.Length > TASKMODE_PLACE)
			{
				int taskModeFlagPlace = TASKMODE_PLACE - 1;
				if (args [taskModeFlagPlace].Equals ("-m")) 
				{
					if (args[TASKMODE_PLACE].Equals("checksum"))
					{
						TaskMode = EnumFileTaskMode.CalculateCheckSummMode;
					}

					if (args[TASKMODE_PLACE].Equals("find"))
					{
						if (args.Length > SEARCHSTRING_PLACE)
						{
							int searchStringFlagPlace = SEARCHSTRING_PLACE - 1;
							if (args[searchStringFlagPlace].Equals ("-s"))
							{
								TaskMode = EnumFileTaskMode.SearchStringMode;
								searchString = args[5];
							}
						}
					}
				}
			}
		}

		public ConsoleInterpreter (String[] args)
		{
			InterpretTaskParam (args);
			InterpretModeParam (args);
		}
	}
}