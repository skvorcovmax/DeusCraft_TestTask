// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using System.IO;
using System.Collections.Generic;


namespace testtask_deuscraft
{
	public class TaskPerformer
	{
		/// <summary>
		/// Проверка корректности введенных параметров
		/// </summary>
		/// <returns><c>true</c>, if parameters was validated, <c>false</c> otherwise.</returns>
		/// <param name="interpreter">Interpreter.</param>
		static bool ValidateParameters(ConsoleInterpreter interpreter)
		{
			bool success = true;

			if (interpreter.GetTask () == ConsoleInterpreter.EnumTask.None) 
			{
				Console.Write("Error: Invalid task arguments");
				success = false;	
			}

			if (interpreter.GetTask () == ConsoleInterpreter.EnumTask.FileTask) 
			{
				String fileName = interpreter.GetFileName();
				if (null == interpreter.GetFileName())
				{
					Console.Write("Error: Miss filename argument");
					success = false;
				}
				else
				{
					if (false == CheckFileExistance(fileName)) 
					{
						Console.Write ("Error : File not found");
						success = false;
					}
				}

				if (interpreter.GetFileTaskMode() == ConsoleInterpreter.EnumFileTaskMode.None)
				{
					Console.Write("Error: Invalid file task arguments");
					success = false;	
				}

				if (interpreter.GetFileTaskMode() == ConsoleInterpreter.EnumFileTaskMode.SearchStringMode)
				{
					if (null == interpreter.GetSearchString())
					{
						Console.Write("Error: Miss search string argument");
						success = false;
					}
				}
			}

			return success;
		}

		/// <summary>
		/// Проверка существования файла.
		/// </summary>
		/// <returns><c>true</c>, if file existance was checked, <c>false</c> otherwise.</returns>
		/// <param name="fileName">File name.</param>
		static bool CheckFileExistance(String fileName)
		{
			FileInfo info = new FileInfo (fileName);
			return info.Exists;
		}

		/// <summary>
		/// Выполнение задачи "Поиск мест вхождений подстроки в файл, в байтах"
		/// </summary>
		/// <param name="fileName">File name.</param>
		/// <param name="searchString">Search string.</param>
		static void PerformSearchStringTask(String fileName, String searchString)
		{
			FileStream fileStream = File.OpenRead (fileName);

			StreamReader streamReader = new StreamReader (fileStream);
			FileStringSearcher searcher = new FileStringSearcher (streamReader, searchString);

			SortedSet<int> entrySet = searcher.GetSearchStringEntrySet ();

			foreach (int value in entrySet)
			{
				Console.Write (value + " ");
			}
		}

		/// <summary>
		/// Выполнение задачи "Вычисление проверочной суммы файла"
		/// </summary>
		/// <param name="fileName">File name.</param>
		static void PerformCheckSummTask(String fileName)
		{
			BinaryReader binaryReader = new BinaryReader (File.OpenRead (fileName));
			CheckSummEvaluator checkSummEvaluator = new CheckSummEvaluator (binaryReader);
			
			long checkSumm = checkSummEvaluator.EvaluateCheckSumm();
	
			Console.Write (checkSumm);
		}

		/// <summary>
		/// Выполнение задачи "Вывод текста help"
		/// </summary>
		static void PerformHelpTask()
		{
			Console.WriteLine("-h for help");
			Console.WriteLine("-f filename -m checksum for evaluate file check sum");
			Console.WriteLine("-f filename -m find -s string for find string");
		}

		/// <summary>
		/// Запуск выполнения задачи на основе типа задачи, получаемого из интерпретатора комманд.
		/// <param name="interpreter">Interpreter.</param>
		public static void PerformInterpreterTask(ConsoleInterpreter interpreter)
		{
			if (false == ValidateParameters(interpreter)) 
			{
				return;
			}

			if (interpreter.GetTask () == ConsoleInterpreter.EnumTask.FileTask) 
			{
				String fileName = interpreter.GetFileName();
				if (interpreter.GetFileTaskMode() == ConsoleInterpreter.EnumFileTaskMode.CalculateCheckSummMode)
				{
					PerformCheckSummTask(fileName);
				}
				
				if (interpreter.GetFileTaskMode() == ConsoleInterpreter.EnumFileTaskMode.SearchStringMode)
				{
					String searchString = interpreter.GetSearchString();
					PerformSearchStringTask(fileName, searchString);
				}
			}

			if (interpreter.GetTask () == ConsoleInterpreter.EnumTask.HelpTask) 
			{
				PerformHelpTask();
			}
		}
	}
}

